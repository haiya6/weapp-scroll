// @ts-check
var exports = module.exports
/**
 * @typedef {WechatMiniprogram.BoundingClientRectCallbackResult} Rect
 * @typedef {{ x: number, y: number }} Pos
 * @typedef {(t: number) => number} TimingFn
 */

var timings = {
  v1: function (t) {
    return 1 + --t * t * t * t * t
  },
  v2: function(t) {
    return t * (2 - t)
  },
  v3: function(t) {
    return 1 - --t * t * t * t
  }
}

// 可配置选项
var options = {
  // 启用X方向滚动
  enableScrollX: false,
  // 启用Y方向滚动
  enableScrollY: false,
  // 滑动容器选择器
  slidingContainerSelector: '.content',
  // 阻尼因子，超出边界后添加效果，值越小，阻力越大
  damping: 0.3,
  // 动量减速度
  deceleration: 0.0015,
  // 动量动画默认的持续时间
  momentumDuration: 1800,
  // OutBounds
  // 加上动量若超出容器后，动量动画持续时间
  momentumOutBoundsDuration: 400,
  // 回弹时长
  bounceDuration: 800
}

var ownerInstance
/**
 * 最外层容器 BoundingClientRect
 * @type {Rect}
 */
var containerRect
/**
 * 滑动容器实例，通过此实例设置 CSS 属性
 */
var slidingContainerInstance
/**
 * 滑动容器 BoundingClientRect
 * @type {Rect}
 */
var slidingContainerRect
/**
 * 标记 X 方向是否能滚动
 */
var canScrollX = false
/**
 * 标记 Y 方向是否能滚动
 */
var canScrollY = false
/**
 * X方向的最小、最大滚动距离。如 -200 至 0（手势往右时，元素左移，translateX 为负值）
 * @type {number}
 */
var minTranslateX
var maxTranslateX = 0
/**
 * Y方向的最小，最大滚动距离。如 -200 至 0（手势往下时，元素上移，translateY 为负值）
 */
var minTranslateY
var maxTranslateY = 0
/**
 * 滑动元素的位置信息，即滑动元素上的 CSS translate 值
 * 触摸动作需要以此为基础进行变换
 * @type {Pos}
 */
var pos = { x: 0, y: 0 }
/**
 * 记录触摸开始时，手指的位置
 */
var startTouch = { clientX: 0, clientY: 0 }
/**
 * 记录每次触摸开啥时，滑动容器位置
 * @type {Pos}
 */
var startPos = { x: 0, y: 0 }
/**
 * 记录触摸开始时的时间戳
 */
var startTimeStamp = 0
/**
 * 记录触摸开始前需要清除的 effect
 */
var effect = null

// Clamp
function clamp(min, max, val) {
  return Math.max(min, Math.min(max, val))
}

/**
 * @param {Pos} p0
 * @return {Pos}
 */
function clonePos(p0) {
  return {
    x: p0.x,
    y: p0.y
  }
}

/**
 * 设置样式
 * @param {Pos} pos0
 */
function setTranslate(pos0) {
  slidingContainerInstance.setStyle({
    transform: 'translateX(' + pos0.x + 'px) translateY(' + pos0.y + 'px)'
  })
  pos.x = pos0.x
  pos.y = pos0.y
}

/**
 * @param {Pos} fromPos
 * @param {Pos} toPos 
 * @param {number} duration 持续时长，单位ms
 * @param {{ x: TimingFn, y: TimingFn }} timing
 * @param {Function=} onComplete 动画完成的回调
 */
function moveFromTo(fromPos, toPos, duration, timing, onComplete) {
  var aborted = false
  var completed = false
  fromPos = clonePos(fromPos)
  toPos = clonePos(toPos)

  if (duration === 0) {
    setTranslate(fromPos)
    ownerInstance.requestAnimationFrame(function() {
      completed = true
      onComplete && onComplete()
    })
  } else {
    var startTime = Date.now()
    var disX = toPos.x - fromPos.x
    var disY = toPos.y - fromPos.y
    var progressX = 1
    var progressY = 1
    var rAFHandler = function rAFHandler() {
      if (aborted) return
      var curPos = clonePos(fromPos)
      if (canScrollX) {
        progressX = timing.x(clamp(0, 1, (Date.now() - startTime) / duration))
        curPos.x = disX * progressX + fromPos.x
      }
      if (canScrollY) {
        progressY = timing.y(clamp(0, 1, (Date.now() - startTime) / duration))
        curPos.y = disY * progressY + fromPos.y
      }
      setTranslate(curPos)
      
      if (progressX < 1 || progressY < 1) {
        ownerInstance.requestAnimationFrame(rAFHandler)
      } else {
        completed = true
        onComplete && onComplete()
      }
    }
    ownerInstance.requestAnimationFrame(rAFHandler)
  }

  if (effect) effect()
  effect = function abort() {
    if (!completed && !aborted) {
      aborted = true
    }
  }
}

/**
 * 超出边界后就行位置修正，即回弹效果
 * @param {Pos} pos
 */
function positionCorrection(pos) {
  /** @type {Pos} */
  var correctedPos = {
    x: clamp(minTranslateX, maxTranslateX, pos.x),
    y: clamp(minTranslateY, maxTranslateY, pos.y)
  }
  if (correctedPos.x !== pos.x || correctedPos.y !== pos.y) {
    moveFromTo(pos, correctedPos, options.bounceDuration, { x: timings.v3, y: timings.v3 })
  }
}

/**
 * @param {typeof options} _options 
 * @param _ 
 * @param _ownerInstance
 * @param instance 
 */
exports.setup = function setup(_options, _, _ownerInstance, instance) {
  // options
  // slidingContainerSelector
  options.slidingContainerSelector = _options.slidingContainerSelector || options.slidingContainerSelector
  // damping
  options.damping = _options.damping || options.damping
  // deceleration
  options.deceleration = _options.deceleration || options.deceleration
  // momentumDuration
  options.momentumDuration = _options.momentumDuration || options.momentumDuration
  // momentumOutBoundsDuration
  options.momentumOutBoundsDuration = _options.momentumOutBoundsDuration || options.momentumOutBoundsDuration
  // bounceDuration
  options.bounceDuration = _options.bounceDuration || options.bounceDuration

  ownerInstance = _ownerInstance
  containerRect = instance.getBoundingClientRect()
  slidingContainerInstance = ownerInstance.selectComponent(options.slidingContainerSelector)
  slidingContainerRect = slidingContainerInstance.getBoundingClientRect()

  if (slidingContainerRect.width > containerRect.width) {
    // canScrollX
    canScrollX = typeof _options.enableScrollX === 'undefined' ? true : _options.enableScrollX
    minTranslateX = (slidingContainerRect.width - containerRect.width) * -1
  }
  if (slidingContainerRect.height > containerRect.height) {
    // canScrollY
    canScrollY = typeof _options.enableScrollY === 'undefined' ? true : _options.enableScrollY
    minTranslateY = (slidingContainerRect.height - containerRect.height) * -1
  }
}

// touchstart
exports.touchstart = function touchstart(event) {
  startTouch.clientX = event.changedTouches[0].clientX
  startTouch.clientY = event.changedTouches[0].clientY

  startPos.x = pos.x
  startPos.y = pos.y

  startTimeStamp = event.timeStamp

  if (effect) {
    effect()
    effect = null
  }
}

// touchmove
exports.touchmove = function touchmove(event) {
  var deltaX = event.changedTouches[0].clientX - startTouch.clientX
  var deltaY = event.changedTouches[0].clientY - startTouch.clientY

  var x = startPos.x
  var y = startPos.y

  if (canScrollX) {
    x += deltaX

    if (x > maxTranslateX) {
      // 手指右滑导致元素左侧超出，超出部分添加阻尼行为
      x = maxTranslateX + options.damping * (x - maxTranslateX)
    } else if (x < minTranslateX) {
      // 手指左滑导致元素右侧超出，超出部分添加阻尼行为
      x = minTranslateX + options.damping * (x - minTranslateX)
    }
  }

  if (canScrollY) {
    y += deltaY

    if (y > maxTranslateY) {
      // 手指下滑导致元素顶部超出，超出部分添加阻尼行为
      y = maxTranslateY + options.damping * (y - maxTranslateY)
    } else if (y < minTranslateY) {
      // 手指上滑导致元素底部超出，超出部分添加阻尼行为
      y = minTranslateY + options.damping * (y - minTranslateY)
    }
  }

  setTranslate({ x: x, y: y })
}

// touchend
exports.touchend = function touchend(event) {
  if (pos.x === startPos.x && pos.y === startPos.y) return

  var eventDuration = event.timeStamp - startTimeStamp
  /** @type {Pos} */
  var finalPos = { x: pos.x, y: pos.y }

  // 动量动画持续时间
  var durationX = 0
  var durationY = 0

  // 动量动画函数
  var timingX = timings.v1
  var timingY = timings.v1

  /**
   * @param {number} start 
   * @param {number} end 
   */
  var calculateMomentum = function calculateMomentum(start, end) {
    var distance = Math.abs(start - end)
    var speed = distance / eventDuration
    var dir = end - start > 0 ? 1 : -1
    var duration = Math.min(options.momentumDuration, (speed * 2) / options.deceleration)
    var delta = Math.pow(speed, 2) / options.deceleration * dir

    return {
      duration: duration,
      delta: delta
    }
  }

  if (canScrollX && finalPos.x === clamp(minTranslateX, maxTranslateX, finalPos.x)) {
    // 在边界中，可以进行动量动画
    var result = calculateMomentum(startPos.x, pos.x)

    durationX = result.duration
    finalPos.x += result.delta

    if (finalPos.x > maxTranslateX || finalPos.x < minTranslateX) {
      durationX = options.momentumOutBoundsDuration
      timingX = timings.v2
      var beyondDis = containerRect.width / 6
      if (finalPos.x > maxTranslateX) {
        finalPos.x = maxTranslateX + beyondDis
      } else {
        finalPos.x = minTranslateX + beyondDis * -1
      }
    }
  }

  if (canScrollY && finalPos.y === clamp(minTranslateY, maxTranslateY, finalPos.y)) {
    // 在边界中，可以进行动量动画
    var result = calculateMomentum(startPos.y, pos.y)

    durationY = result.duration
    finalPos.y += result.delta

    if (finalPos.y > maxTranslateY || finalPos.y < minTranslateY) {
      durationY = options.momentumOutBoundsDuration
      timingY = timings.v2
      var beyondDis = containerRect.height / 6
      if (finalPos.y > maxTranslateY) {
        finalPos.y = maxTranslateY + beyondDis
      } else {
        finalPos.y = minTranslateY + beyondDis * -1
      }
    }
  }

  moveFromTo(pos, finalPos, Math.max(durationX, durationY), { x: timingX, y: timingY }, function() {
    positionCorrection(finalPos)
  })
}
